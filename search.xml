<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java源码剖析从入门到放弃 — Integer]]></title>
    <url>%2F2017%2F12%2F17%2FJava%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%20%E2%80%94%20Integer%2F</url>
    <content type="text"><![CDATA[文章仅供参考，转载请注明出处: https://cccc0der.github.io/ 前言 Java是一门面向对象的语言，从接触OOP那一刻起，程序员就被告知在OOP的世界中，一切皆是对象。 由此，某书上说程序员是出轨率最高的职业看来也不是没有道理，因为放眼望去，在我们程序员的世界里对象太多了，而我们最怕的也是找不到对象。 在这样的环境下，int,float,double等这样的基本类型单身狗，显然不符合Java特征，那么来看一下Java是如何为这些单身狗设计相应对象的吧。 Number类123456789public abstract class Number implements java.io.Serializable &#123; private static final long serialVersionUID = -8742448824652078965L; public abstract int intValue(); public abstract long longValue(); public abstract float floatValue(); public abstract double doubleValue(); public byte byteValue() &#123; return (byte)intValue(); &#125; public short shortValue() &#123; return (short)intValue(); &#125;&#125; Java的设计者首先为所有的数值类型做了一层抽象，并将所有的基本数值类型方法放到了这个Number类中，这位看官可能要问了：我只要将取值方法的返回值修改为Object类型或者将方法改为泛型方法不就可以了么，为什么要增加这么多方法呢？因为基本类型没有对象啊，单身狗连在程序中都要差一截，这个世界还真是满满的恶意。 在实际使用中，我们也可能想获得一个int值的浮点表示，也可能想取一个小数的整数部分，因此JDK将所有的基本数值类型都放到这个抽象类Number中，而各位机智的看官也一定猜到了Java中所有的数值类都将通过继承Number类进行实现。下面让我们一起来看一下Java是如何为int设计对象的吧。 1. Integer定义 Java中使用了Integer这样的一个类对int类型进行了封装，那么Integer类是如何定义的呢1public final class Integer extends Number implements Comparable&lt;Integer&gt;]]></content>
      <categories>
        <category>Java源码剖析从入门到放弃</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码剖析</tag>
      </tags>
  </entry>
</search>
